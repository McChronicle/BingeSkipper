(() => { "use strict"; var t = { 421: (t, e, o) => { o.d(e, { Z9: () => r }); const n = chrome.storage.sync; async function r() { return await n.get(["autoClickContinueWatching", "autoClickNextEpisode", "skipIntroAndRecap"]) } } }, e = {}; function o(n) { var r = e[n]; if (void 0 !== r) return r.exports; var a = e[n] = { exports: {} }; return t[n](a, a.exports, o), a.exports } o.d = (t, e) => { for (var n in e) o.o(e, n) && !o.o(t, n) && Object.defineProperty(t, n, { enumerable: !0, get: e[n] }) }, o.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e); var n = o(421); new MutationObserver(async () => { const t = document.querySelector(".watch-video--skip-content-button"), e = document.querySelector("[data-uia='next-episode-seamless-button'], [data-uia='next-episode-seamless-button-draining']"), o = document.querySelector("[data-uia='interrupt-autoplay-continue']"), r = await (0, n.Z9)(); t && r.skipIntroAndRecap ? t.click() : e && r.autoClickNextEpisode ? e.click() : o && r.autoClickContinueWatching && o.click() }).observe(document.body, { childList: !0, subtree: !0 }) })();